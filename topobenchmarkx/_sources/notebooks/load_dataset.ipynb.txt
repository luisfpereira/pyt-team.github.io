{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_368487/17376187.py:37: UserWarning: \n",
      "The version_base parameter is not specified.\n",
      "Please specify a compatability version level, or None.\n",
      "Will assume defaults for version 1.1\n",
      "  initialize(config_path=\"../configs\", job_name=\"job\")\n"
     ]
    }
   ],
   "source": [
    "import rootutils\n",
    "\n",
    "rootutils.setup_root(\"./\", indicator=\".project-root\", pythonpath=True)\n",
    "\n",
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "\n",
    "from hydra import compose, initialize\n",
    "from omegaconf import OmegaConf\n",
    "\n",
    "from topobenchmarkx.utils.config_resolvers import (\n",
    "    get_default_transform,\n",
    "    get_monitor_metric,\n",
    "    get_monitor_mode,\n",
    "    infer_in_channels,\n",
    ")\n",
    "\n",
    "OmegaConf.register_new_resolver(\"get_default_transform\", get_default_transform)\n",
    "OmegaConf.register_new_resolver(\"get_monitor_metric\", get_monitor_metric)\n",
    "OmegaConf.register_new_resolver(\"get_monitor_mode\", get_monitor_mode)\n",
    "OmegaConf.register_new_resolver(\"infer_in_channels\", infer_in_channels)\n",
    "OmegaConf.register_new_resolver(\n",
    "    \"parameter_multiplication\", lambda x, y: int(int(x) * int(y))\n",
    ")\n",
    "\n",
    "initialize(config_path=\"../configs\", job_name=\"job\")\n",
    "cfg = compose(config_name=\"run.yaml\", return_hydra_config=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'hydra': {'run': {'dir': '${paths.log_dir}/${task_name}/runs/${now:%Y-%m-%d}_${now:%H-%M-%S}'}, 'sweep': {'dir': '${paths.log_dir}/${task_name}/multiruns/${now:%Y-%m-%d}_${now:%H-%M-%S}', 'subdir': '${hydra.job.num}'}, 'launcher': {'_target_': 'hydra._internal.core_plugins.basic_launcher.BasicLauncher'}, 'sweeper': {'_target_': 'hydra._internal.core_plugins.basic_sweeper.BasicSweeper', 'max_batch_size': None, 'params': None}, 'help': {'app_name': '${hydra.job.name}', 'header': '${hydra.help.app_name} is powered by Hydra.\\n', 'footer': 'Powered by Hydra (https://hydra.cc)\\nUse --hydra-help to view Hydra specific help\\n', 'template': '${hydra.help.header}\\n== Configuration groups ==\\nCompose your configuration from those groups (group=option)\\n\\n$APP_CONFIG_GROUPS\\n\\n== Config ==\\nOverride anything in the config (foo.bar=value)\\n\\n$CONFIG\\n\\n${hydra.help.footer}\\n'}, 'hydra_help': {'template': \"Hydra (${hydra.runtime.version})\\nSee https://hydra.cc for more info.\\n\\n== Flags ==\\n$FLAGS_HELP\\n\\n== Configuration groups ==\\nCompose your configuration from those groups (For example, append hydra/job_logging=disabled to command line)\\n\\n$HYDRA_CONFIG_GROUPS\\n\\nUse '--cfg hydra' to Show the Hydra config.\\n\", 'hydra_help': '???'}, 'hydra_logging': {'version': 1, 'formatters': {'colorlog': {'()': 'colorlog.ColoredFormatter', 'format': '[%(cyan)s%(asctime)s%(reset)s][%(purple)sHYDRA%(reset)s] %(message)s'}}, 'handlers': {'console': {'class': 'logging.StreamHandler', 'formatter': 'colorlog', 'stream': 'ext://sys.stdout'}}, 'root': {'level': 'INFO', 'handlers': ['console']}, 'disable_existing_loggers': False}, 'job_logging': {'version': 1, 'formatters': {'simple': {'format': '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'}, 'colorlog': {'()': 'colorlog.ColoredFormatter', 'format': '[%(cyan)s%(asctime)s%(reset)s][%(blue)s%(name)s%(reset)s][%(log_color)s%(levelname)s%(reset)s] - %(message)s', 'log_colors': {'DEBUG': 'purple', 'INFO': 'green', 'WARNING': 'yellow', 'ERROR': 'red', 'CRITICAL': 'red'}}}, 'handlers': {'console': {'class': 'logging.StreamHandler', 'formatter': 'colorlog', 'stream': 'ext://sys.stdout'}, 'file': {'class': 'logging.FileHandler', 'formatter': 'simple', 'filename': '${hydra.runtime.output_dir}/${task_name}.log'}}, 'root': {'level': 'INFO', 'handlers': ['console', 'file']}, 'disable_existing_loggers': False}, 'env': {}, 'mode': None, 'searchpath': [], 'callbacks': {}, 'output_subdir': '.hydra', 'overrides': {'hydra': [], 'task': []}, 'job': {'name': 'job', 'chdir': None, 'override_dirname': '', 'id': '???', 'num': '???', 'config_name': 'run.yaml', 'env_set': {}, 'env_copy': [], 'config': {'override_dirname': {'kv_sep': '=', 'item_sep': ',', 'exclude_keys': []}}}, 'runtime': {'version': '1.3.2', 'version_base': '1.1', 'cwd': '/home/lev/projects/TopoBenchmarkX/tutorials', 'config_sources': [{'path': 'hydra.conf', 'schema': 'pkg', 'provider': 'hydra'}, {'path': '/home/lev/projects/TopoBenchmarkX/configs', 'schema': 'file', 'provider': 'main'}, {'path': 'hydra_plugins.hydra_colorlog.conf', 'schema': 'pkg', 'provider': 'hydra-colorlog'}, {'path': '', 'schema': 'structured', 'provider': 'schema'}], 'output_dir': '???', 'choices': {'debug': None, 'local': 'default', 'hparams_search': None, 'experiment': None, 'hydra': 'default', 'extras': 'default', 'paths': 'default', 'trainer': 'default', 'logger': 'wandb', 'callbacks': 'default', 'evaluator': 'default', 'model': 'graph/gcn', 'dataset': 'us_county_demos', 'dataset/transforms': 'identity', 'dataset/transforms/transforms@_global_': None, 'hydra/env': 'default', 'hydra/callbacks': None, 'hydra/job_logging': 'colorlog', 'hydra/hydra_logging': 'colorlog', 'hydra/hydra_help': 'default', 'hydra/help': 'default', 'hydra/sweeper': 'basic', 'hydra/launcher': 'basic', 'hydra/output': 'default'}}, 'verbose': False}, 'task_name': 'train', 'tags': ['dev'], 'train': True, 'test': True, 'ckpt_path': None, 'seed': None, 'dataset': {'_target_': 'topobenchmarkx.data.load.GraphLoader', 'parameters': {'data_domain': 'graph', 'data_type': 'cornel', 'year': 2012, 'data_name': 'US-county-demos', 'data_dir': '${paths.data_dir}/${dataset.parameters.data_domain}/${dataset.parameters.data_type}', 'data_split_dir': '${paths.data_dir}/data_splits/${dataset.parameters.data_name}', 'num_features': 5, 'num_classes': 1, 'task': 'regression', 'task_variable': 'Election', 'loss_type': 'mse', 'monitor_metric': 'mse', 'task_level': 'node', 'data_seed': 0, 'split_type': 'random', 'k': 10, 'train_prop': 0.5, 'batch_size': 1, 'num_workers': 1, 'pin_memory': False}}, 'model': {'_target_': 'topobenchmarkx.models.network_module.TBXModel', 'feature_encoder': {'_target_': 'topobenchmarkx.models.encoders.default_encoders.BaseFeatureEncoder', 'in_channels': '${infer_in_channels:${dataset},${oc.select:transforms,null}}', 'out_channels': 32}, 'backbone': {'_target_': 'torch_geometric.nn.models.GCN', 'in_channels': '${model.feature_encoder.out_channels}', 'hidden_channels': '${model.feature_encoder.out_channels}', 'num_layers': 3, 'dropout': 0.0, 'act': 'relu'}, 'loss': {'_target_': 'topobenchmarkx.models.losses.loss.TBXLoss', 'task': '${dataset.parameters.task}', 'loss_type': '${dataset.parameters.loss_type}'}, 'readout': {'_target_': 'topobenchmarkx.models.readouts.default_readouts.GNNBatchReadOut', 'task_level': '${dataset.parameters.task_level}', 'in_channels': '${model.backbone.hidden_channels}', 'out_channels': '${dataset.parameters.num_classes}'}, 'backbone_wrapper': {'_target_': 'topobenchmarkx.models.wrappers.default_wrapper.GNNWrapper', '_partial_': True}, 'optimizer': {'_target_': 'torch.optim.Adam', '_partial_': True, 'lr': 0.001, 'weight_decay': 0.0}, 'scheduler': {'_target_': 'torch.optim.lr_scheduler.StepLR', '_partial_': True, 'step_size': 50, 'gamma': 0.5}, 'compile': False}, 'evaluator': {'_target_': 'topobenchmarkx.evaluator.evaluator.TBXEvaluator', 'task': '${dataset.parameters.task}', 'task_level': '${dataset.parameters.task_level}', 'num_classes': '${dataset.parameters.num_classes}', 'classification_metrics': ['accuracy'], 'regression_metrics': ['mae', 'mse']}, 'callbacks': {'model_checkpoint': {'_target_': 'lightning.pytorch.callbacks.ModelCheckpoint', 'dirpath': '${paths.output_dir}/checkpoints', 'filename': 'epoch_{epoch:03d}', 'monitor': '${get_monitor_metric:${dataset.parameters.task},${dataset.parameters.monitor_metric}}', 'verbose': False, 'save_last': False, 'save_top_k': 1, 'mode': '${get_monitor_mode:${dataset.parameters.task}}', 'auto_insert_metric_name': False, 'save_weights_only': False, 'every_n_train_steps': None, 'train_time_interval': None, 'every_n_epochs': None, 'save_on_train_epoch_end': None}, 'early_stopping': {'_target_': 'lightning.pytorch.callbacks.EarlyStopping', 'monitor': '${get_monitor_metric:${dataset.parameters.task},${dataset.parameters.monitor_metric}}', 'patience': 25, 'mode': '${get_monitor_mode:${dataset.parameters.task}}', 'min_delta': 0.0, 'verbose': True, 'strict': True, 'check_finite': True, 'stopping_threshold': None, 'divergence_threshold': None, 'check_on_train_epoch_end': None}, 'model_summary': {'_target_': 'lightning.pytorch.callbacks.RichModelSummary', 'max_depth': -1}, 'rich_progress_bar': {'_target_': 'lightning.pytorch.callbacks.RichProgressBar'}, 'learning_rate_monitor': {'_target_': 'lightning.pytorch.callbacks.LearningRateMonitor', 'logging_interval': 'epoch'}}, 'logger': {'wandb': {'_target_': 'lightning.pytorch.loggers.wandb.WandbLogger', 'save_dir': '${paths.output_dir}', 'offline': False, 'id': None, 'anonymous': None, 'project': 'topox_10fold_sweep', 'log_model': False, 'prefix': '', 'group': '', 'tags': [], 'job_type': ''}}, 'trainer': {'_target_': 'lightning.pytorch.trainer.Trainer', 'default_root_dir': '${paths.output_dir}', 'min_epochs': 1, 'max_epochs': 350, 'accelerator': 'gpu', 'devices': [0], 'check_val_every_n_epoch': 5, 'deterministic': False, 'inference_mode': False}, 'paths': {'root_dir': '${oc.env:PROJECT_ROOT}', 'data_dir': '${paths.root_dir}/datasets/', 'log_dir': '${paths.root_dir}/logs/', 'output_dir': '${hydra:runtime.output_dir}', 'work_dir': '${hydra:runtime.cwd}'}, 'extras': {'ignore_warnings': False, 'enforce_tags': True, 'print_config': True}}"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cfg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Download complete.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Processing...\n",
      "Done!\n"
     ]
    }
   ],
   "source": [
    "dataset = hydra.utils.instantiate(cfg.dataset, _recursive_=False)\n",
    "dataset = dataset.load()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Data(x=[3107, 6], edge_index=[2, 18456], y=[3107], train_mask=[1553], val_mask=[776], test_mask=[778])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset[0]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "topo",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
